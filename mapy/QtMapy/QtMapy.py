
from __future__ import with_statement
from PyQt4 import QtCore, QtGui

import numpy as np
import sympy
import sys
#import mapy
#import Systems
#import SymplecticIntegrator
import mapy
#import __init__ as mapy
import inspect

twopi = 2*np.pi

# import the MainWindow widget from the converted .ui files
from .Design.maindesign import Ui_MainWindow
from .Design.popupAbout import Ui_AboutDialog
#from Untitle import Ui_MainWindow # test for py2app



class AboutDialog(QtGui.QDialog, Ui_AboutDialog):
    def __init__(self,parent=None):
        QtGui.QDialog.__init__(self,parent)
        self.setupUi(self)

class ParameterDialog(QtGui.QDialog):
    def __init__(self, mapsys, parent=None):
        QtGui.QDialog.__init__(self,parent)

        grid = QtGui.QGridLayout()
        args = inspect.getargspec(mapsys.__init__)[0][1:]
        parameters = [getattr(mapsys, p) for p in args]

        self.LineEdits=[]
        for i in range(len(args)):
            label = QtGui.QLabel("%s:" % args[i])
            le = QtGui.QLineEdit(self)
            le.setText("%f" % parameters[i])
            self.LineEdits.append(le)          
            
            grid.addWidget(label, i, 0)
            grid.addWidget(le, i, 1)
            
        label = QtGui.QLabel("Priodicity:")
        grid.addWidget(label,i+1,0)
        i = i + 2
        qp = ["q:","p:"]
        self.Combs=[]
        for j in range(2):
            i = i + j
            label = QtGui.QLabel("%s" % qp[j])
            grid.addWidget(label, i, 0)
                        
            combo = QtGui.QComboBox()
            combo.addItems(['True','False'])
            if mapsys.periodicity[j]:
                combo.setCurrentIndex(0)
            else:
                combo.setCurrentIndex(1)                
            self.Combs.append(combo)
            grid.addWidget(combo, i, 1)

        
        self.buttonBox = QtGui.QDialogButtonBox(self)
        self.buttonBox.setOrientation(QtCore.Qt.Horizontal)
        self.buttonBox.setStandardButtons(QtGui.QDialogButtonBox.Cancel|QtGui.QDialogButtonBox.Ok)
        #self.buttonBox.clicked.connect(self.actClose)
        self.buttonBox.accepted.connect(self.accept)
        self.buttonBox.rejected.connect(self.close)                

        grid.addWidget(self.buttonBox, i+1,1)
        self.setLayout(grid)
        self.setWindowTitle('Parameter Setting')
        
    def accept(self):
        self.paras = [float(x.text()) for x in self.LineEdits]
        self.periodicity = [True if x.currentText() == 'True' else False for x in self.Combs]
        self.close()
        


class DesignerMainWindow(QtGui.QMainWindow, Ui_MainWindow):
    """Customization for Qt Designer created window"""
    def __init__(self, parent = None):
        super(DesignerMainWindow, self).__init__(parent)

        # setup the GUI --> function generated by pyuic4
        self.setupUi(self)
        self.creatActions()
        self.on_SelectMapping()

        # mapy
        self.mapsys = mapy.Systems.Standard()
        self.mapsys = getattr(mapy.Systems, "Standard")()

    def creatActions(self):
        #signal slot
        self.plotButton.clicked.connect(self.actRandomPlot)
        self.canvasClearButton.clicked.connect(self.actCanvasClear)
        self.ReplotButton.clicked.connect(self.actReplot)        
        self.mpl.canvas.mpl_connect('button_press_event', self.actCanvasClick)
        self.mpl.canvas.mpl_connect('mouse', self.actCanvasClick)        
        
        self.actionAboutQtMapy.triggered.connect(self.on_AboutInfomation)
        self.dialogTextBrowser = AboutDialog()
        self.ParameterButton.clicked.connect(self.openParameterSetting)        

        # grouping
        self.MappingGroup = QtGui.QActionGroup(self)
        self.MappingGroup.addAction(self.actionHenon_map)
        self.MappingGroup.addAction(self.actionStandard_map)
        self.MappingGroup.addAction(self.actionHarper_map)
        self.MappingGroup.addAction(self.actionHarmonic_map)
        self.MappingGroup.triggered.connect(self.on_SelectMapping)

        
    def openParameterSetting(self):
        self.parameterDialog.exec_()
        paras = self.parameterDialog.paras
        periodicity = self.parameterDialog.periodicity
        
        mapping = self.MappingGroup.checkedAction()        
        sysname = mapping.text().split(" ")[0]
        f = getattr(mapy.Systems, sysname)
        self.mapsys = f(*paras)
        self.mapsys.periodicity = periodicity
        self.show_system_parameter(self.label_Parameters)
        
        
#    def draw_systeminfo(self)
    def on_SelectMapping(self):
        mapping = self.MappingGroup.checkedAction()
        sysname = mapping.text().split(" ")[0]
        self.mapsys = getattr(mapy.Systems, sysname)()
        self.show_system_def(sysname, self.label_SystemInfo)
        self.show_system_parameter(self.label_Parameters)
        self.parameterDialog = ParameterDialog(self.mapsys)        

    def show_system_def(self, sysname,label):
        q,p = sympy.Symbol("q"),sympy.Symbol("p")
        args = inspect.getargspec(self.mapsys.__init__)[0][1:]
        print(args)
        paras = [sympy.Symbol(p) for p in args]
        f = getattr(mapy.Systems, sysname)
        mapsys = f(*paras)
        T, V = mapsys.get_Hamiltonian()
        print(T(p),V(q))
        kinetic_info = "T(q,p) = %s" % T(p)
        potential_info = "V(q,p) = %s" % V(q)
        sysinfo = kinetic_info + "\n" + potential_info
        label.setText("%s" % sysinfo)

    def show_system_parameter(self, label):
        args = inspect.getargspec(self.mapsys.__init__)[0][1:]
        paras = [getattr(self.mapsys, p) for p in args]
        parainfo = ""
        for i in range(len(args)):
            parainfo += "%s = %f\n"  % (args[i], paras[i])
        label.setText("%s" % parainfo)
        self.show_system_periodicity(self.label_Periodicity)                

    def show_system_periodicity(self,label):
        p = self.mapsys.periodicity
        text = "q: %s\t p:%s" % (p[0],p[1])
        label.setText("%s"% text)
        
    def on_AboutInfomation(self):
        self.dialogTextBrowser.exec_()

    def set_mpl_canvas_plot_range(self):
        x = self.lineEdit_qrange.text().split(",")
        y = self.lineEdit_prange.text().split(",")

        pr_str = [x[0].strip(),x[1].strip(), y[0].strip(),y[1].strip()]
        pr = []        
        for z in pr_str:
            pr.append(float(sympy.N(z)))
        self.mpl.canvas.ax.set_xlim(pr[0],pr[1])
        self.mpl.canvas.ax.set_ylim(pr[2],pr[3])
        
        
    def actCanvasClick(self, event):
        try:
            print('(x,y) = (%f, %f) :button=%d, '%(event.xdata, event.ydata, event.button))
            init = [np.array([event.xdata]), np.array([event.ydata])]
            iteration = int(self.itaration_lineEdit.text())
            samplenum = int(self.samplenum_lineEdit.text())            
            x = self.getorbit(1, iteration, init)

            self.mpl.canvas.ax.plot(x[0],x[1],',')
            self.canvasdraw()
        except TypeError:
            pass
        
    def actRandomPlot(self):
        iteration = int(self.itaration_lineEdit.text())
        samplenum = int(self.samplenum_lineEdit.text())
        x = self.getorbit(samplenum, iteration)
        self.mpl.canvas.ax.plot(x[0],x[1],',k')
        self.canvasdraw()

    def canvasdraw(self,xlabel=r"q",ylabel=r"p"):
        self.set_mpl_canvas_plot_range()
        self.mpl.canvas.draw()
    
        
    def actReplot(self):     
        self.canvasdraw()        

    def actCanvasClear(self):
        self.mpl.canvas.ax.clear()
        self.mpl.canvas.draw()
        
    def getorbit(self, samplenum, iteration, init=None):
        funcT, funcV = self.mapsys.get_DHamiltonian()
        dt = float(self.lineEdit_SI_dt.text())
        order = int(self.lineEdit_SI_order.text())        
        SI = mapy.SymplecticIntegrator(funcT,funcV,dt=dt,order=order)

        if init ==None:
            q = np.random.random(samplenum)*twopi
            p = np.random.random(samplenum)*twopi-np.pi
            init = [q,p]
        x = init[:]
        traj = [np.array([]), np.array([])]        

        for i in range(iteration):
            for j in range(2):
                if self.mapsys.periodicity[j]:
                    x[j] = x[j] - np.floor((x[j]-np.pi)/twopi)*twopi - twopi             
                traj[j] = np.append(traj[j], x[j])                
            x = SI.evolve(x)            
        return traj
        
            
#        l, v = self.parse_file(self.mpllineEdit.text())

#        x = np.linspace(0,2*np.pi,100)

        #self.mpl.canvas.ax.bar(np.arange(len(l))-0.25, v, width=0.5)
#        self.mpl.canvas.ax.set_xlim(xmin=-0.25, xmax=len(l)-0.75)
 #       self.mpl.canvas.ax.set_xticks(range(len(l)))
 #       self.mpl.canvas.ax.set_xticklabels(l)
 #       self.mplwidget.canvas.ax.get_yaxis().grid(True)
def run():
    app = QtGui.QApplication(sys.argv)
    dmw = DesignerMainWindow()
    dmw.show()
    sys.exit(app.exec_())
    


        
if __name__ == '__main__':

    app = QtGui.QApplication(sys.argv)

    dmw = DesignerMainWindow()
    dmw.show()

    sys.exit(app.exec_())